RC.get(con, "test", "1", "a")
RC.get(con, "test", "1", c("a", "b"))
RC.describe.keyspace(con, "test")
RC.describe.keyspace(con, "demo")
RC.get(con, "test", "1", c("a", "b"))
RC.mget.range(con, "test", c("1", "2"))
RC.get.range.slices(con, "test")
RC.describe.keyspace(con, "demo")
RC.read.table(con, "test")
RC.get.range.slices(con, "test")
RC.get(con, "test", "1", 1:2)
RC.get(con, "test", "1", 1)
RC.get(con, "test", "1", "1")
RC.get(con, "test", "1", "2")
RC.get(con, "test", "1", "")
RC.get(con, "test", "1", "premier")
RC.get(con, "test", "1", "a")
RC.get(con, "test", "1", "b")
RC.describe.keyspace(con, "demo")
RC.read.table(con, "test")
??schema
??RC
RC.cluster.name(con)
??RC
RC.mutate
?RC.mutate
RC.mget.range(con, "test", c("1", "2"))
RC.get.range(con, "test", "1")
RC.get.range.slices(con, "test")
class(RC.get.range.slices(con, "test"))
lapply(RC.get.range.slices(con, "test"), "length")
lapply(RC.get.range.slices(con, "test"), "print")
lapply(RC.get.range.slices(con, "test"), "dim")
lapply(RC.get.range.slices(con, "test"), "rownames")
lapply(RC.get.range.slices(con, "test"), "colnames")
lapply(RC.get.range.slices(con, "test"), "rownames")
lapply(RC.get.range.slices(con, "test"), "attributes")
class(iris$Species)
summary(iris$Species)
levels(iris$Species)
iris$Sp = factor(iris$Species, labels = c("a", "a", "b"))
iris$Sp[which(iris$Sp == 'versicolor')] = 'virginica'
which(iris$Sp == 'versicolor')
iris$Sp
iris$Sp = iris$Species
iris$Sp[which(iris$Sp == 'versicolor')] = 'virginica'
summary(iris$Sp)
levels(iris$Sp)
levels(iris$Sp)[2] = NULL
as.factor(iris$Sp)
factor(iris$Sp)
install.packages("WikiepdiaR")
install.packages("WikipediaR")
library(WikipediaR)
?WikipediaR-package
?WikipediaR
links("Louis Pasteur")
links("Louis Pasteur")
links("Louis Pasteur", "fr")
links("Louis Pasteur")
links("Louis Pasteur", "en")
links(NoSQL)
links("NoSQL")
links("NoSQL", "fr")
library(sqldf)
?update
install.packages("manipulate")
install.packages("sqldf")
install.packages("knitr")
library(sqldf)
?sqldf
?test
?options
rm(list=ls())
rm(list=ls())
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
?ccumsum
?cumsum
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
?renderPlot
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
??title
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
?selectInput
c("cyl", "vs", "am", "gear", "carb")
c("cyl", "vs", "am", "gear", "carb")  %in% "cyl"
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
c("cyl", "vs", "am", "gear", "carb")  !%in% "cyl"
c("cyl", "vs", "am", "gear", "carb")  %!in% "cyl"
!(c("cyl", "vs", "am", "gear", "carb")  %in% "cyl")
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
??brewer
install.packages("RColorBrewer")
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
?RColorBrewer
??RColorBrewer
brewer.pal(7, "Greens")
library(RColorBrewer)
brewer.pal(7, "Greens")
brewer.pal(20, "Greens")
display.brewer.all(colorblindFriendly=TRUE)
brewer.pal.info
?case
??case
??if
()
?"if"
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
p = prop.table(
table(
mtcars$cyl,
mtcars$gear
),
margin = 2
)
barplot(
p,
axes = F,
col = brewer.pal(9, "Set1")
)
legend(
"top",
)
names(p)
p
rownames(p)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?legend
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
?"shinyUI"
?theme
??theme
install.packages("shinythemes")
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
h1("test")
titlePanel("test")
sidebarPanel()
sidebarLayout()
sidebarLayout(sidebarPanel(p("side")), mainPanel(p("main")))
shinytheme("united")
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
shiny::runApp('Google Drive/A synchroniser/Enseignements/2015-2016/STID S3 - SID/shiny-tp1')
p
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("create table a (id INTEGER, lib VARCHAR2(20), val REAL)")
sqldf("INSERT INTO a VALUES (1, 'test', 12.3)")
print(a)
res = sqldf("create table a (id INTEGER, lib VARCHAR2(20), val REAL);")
res
atributes(res)
attributes(res)
?sqldf
sqldf("create database db;")
sqldf("create data base db;")
sqldf("create table db;")
sqldf("create table db()")
sqldf("create table db();")
sqldf("create table db(id INTEGER);")
sqldf("create table db(id INTEGER);", drv = "SQLite")
sqldf("create table db(id INTEGER);", drv = "SQLite", dbname = ":memory:")
sqldf("create table iris as select * from Iris")
sqldf("create table tab as select * from Iris")
sqldf("select * from Iris")
Iris
iris
sqldf("create table tab as select * from iris")
tab
sqldf("create table db(id INTEGER);", drv = "SQLite", dbname = "test.sqlite")
getwd()
sqldf("create table db(id INTEGER);", drv = "SQLite", dbname = ":memory:")
sqldf("create table db(id INTEGER);", drv = "SQLite", dbname = ":memory:")
sqldf("select * from db", drv = "SQLite", dbname = ":memory:")
sqldf("create table db(id INT);", drv = "SQLite", dbname = ":memory:")
sqldf("select * from db", drv = "SQLite", dbname = ":memory:")
sqldf("create temp table db(id INT);", drv = "SQLite", dbname = ":memory:")
sqldf("select * from db", drv = "SQLite", dbname = ":memory:")
sqldf("create temp table db(id INT);")
sqldf("select * from db", drv = "SQLite", dbname = ":memory:")
sqldf("attach 'Test.sqlite' as new")
sqldf("create table db(id INT);")
sqldf("select * from db", drv = "SQLite", dbname = ":memory:")
sqldf("create table db(id INT);", dbname = "Test.sqlite")
sqldf("select * from db", dbname = "Test.sqlite")
sqldf("INSERT INTO db VALUES (1)")
sqldf("INSERT INTO db VALUES (1)", dbname = "Test.sqlite")
sqldf("select * from db", dbname = "Test.sqlite")
sqldf("select * from iris")
library(sqldf)
sqldf("select * from iris")
load("~/Google Drive/A synchroniser/Enseignements/DonnÃ©es/Exemple/exemple.Rdata")
Etudiant
subset(Etudiant, subset = Sexe = 'F')
subset(Etudiant, subset = Sexe == 'F')
subset(Etudiant, select = c(Sexe))
?subset
subset(Etudiant, select = c(Sexe, Age), )
unique(subset(Etudiant, select = c(Sexe, Age)))
unique(subset(Etudiant, select = c(Sexe)))
subset(Etudiant, subset = Sexe == 'F')
subset(Etudiant, subset = Sexe == 'F' & Age >= 19)
subset(Etudiant, drop = c(Sexe))
subset(Etudiant, drop = "Sexe")
subset(Etudiant, select = c(Sexe), drop  = T)
subset(Etudiant, drop  = T)
subset(Etudiant, drop  = c(T)
)
subset(Etudiant, drop = c(F))
subset(Etudiant, drop = c(F, T, T, F, F))
subset(Etudiant, drop = c(F, T, T, F))
subset(Etudiant, select = c(Sexe))
unique(subset(Etudiant, select = c(Sexe)))
transform(Etudiant, AnneeNaiss = 2015 - Age)
transform(Etudiant, AnneeNaiss = 2015 - Age, Initiale = substr(Nom, 1, 1))
transform(Etudiant, AnneeNaiss = 2015 - Age,
Initiale = paste(substr(Nom, 1, 1), substr(Prenom, 1, 1), sep = "."))
aggregagte(Age ~ Sexe, Etudiant, mean)
agregagte(Age ~ Sexe, Etudiant, mean)
aggregate(Age ~ Sexe, Etudiant, mean)
aggregate(Age ~ ., Etudiant, mean)
aggregate(Age ~ 1, Etudiant, mean)
aggregate(Age ~ 2, Etudiant, mean)
aggregate(Age ~ 1, Etudiant, mean)
?aggregate
aggregate(. ~ Species, data = iris, mean)
aggregate(len ~ ., data = ToothGrowth, mean)
ToothGrowth
aggregate(Age ~ Sexe, Etudiant, c(mean, length)
aggregate(Age ~ Sexe, Etudiant, c(mean, length))
aggregate(Age ~ Sexe, Etudiant, c(mean, length))
aggregate(Age ~ Sexe, Etudiant, mean)
aggregate(Age ~ Sexe, Etudiant, length)
df1 = subset(Etudiant, subset = Sexe == "F")
df2 = subset(Etudiant, subset = Age >= 19)
df1
df2
??minus
??except
??intersect
rbind(df1, df2)
union(df1, df2)
merge(df1, df2)
?merge
merge(df1, df2, all = T)
df1
df2
rbind(df1, df2)
unique(rbind(df1, df2))
merge(df1, df2, all = T)
merge(df1, df2)
merge(df1, df2, all.x = T, all.y = F)
df1
df2
merge(df1, df2, all.x = T, all.y = F)
merge(df1, df2, all.x = F, all.y = F)
merge(df1, df2, all.x = T, all.y = F)
merge(df1, df2, all = T, all.x = F, all.y = F)
df1 %in% df2
df2 %in% df1
?"%in%"
lapply(df1, print)
lapply(t(df1), print)
lapply(t(df1), function(r) { cat("row\n"); print(r); })
t(df1)
for (d in df1) print(d)
merge(df1, df2)
rbind(df1, merge(df1, df2))
aggregate( . ~1, rbind(df1, merge(df1, df2)), length)
aggregate(Age ~1, rbind(df1, merge(df1, df2)), length)
aggregate(. ~ ., rbind(df1, merge(df1, df2)), length)
aggregate(IdEtu ~ ., rbind(df1, merge(df1, df2)), length)
subset(aggregate(IdEtu ~ ., rbind(df1, merge(df1, df2)), length), subset = IdEtu == 1)
merge(Etudiant, Note)
merge(Etudiant, Note, all = T)
merge(Etudiant, Note, all.x = T)
merge(Etudiant, Note, all.y = T)
?merge
library(mdbtools)
library(RSQLite)
db = dbConnect("SQLite()", "Google Drive/A synchroniser/Enseignements/DonnÃ©es/Gymnase 2000/Gymnase2000.sqlite")
db = dbConnect("RSQLite::SQLite()", "Google Drive/A synchroniser/Enseignements/DonnÃ©es/Gymnase 2000/Gymnase2000.sqlite")
db = dbConnect(SQLite(), "Google Drive/A synchroniser/Enseignements/DonnÃ©es/Gymnase 2000/Gymnase2000.sqlite")
dbListTables(db)
for (l in liste) {
assign(l, dbGetQuery(db, paste("SELECT * FROM", l)))
}
liste = dbListTables(db)
for (l in liste) {
assign(l, dbGetQuery(db, paste("SELECT * FROM", l)))
}
rm(list = ls())
db = dbConnect(SQLite(), "Google Drive/A synchroniser/Enseignements/DonnÃ©es/Gymnase 2000/Gymnase2000.sqlite")
liste = dbListTables(db)
for (l in liste) {
assign(l, dbGetQuery(db, paste("SELECT * FROM", l)))
}
rm(vue1, vue2, vue3)
rm(vue4)
dbDisconnect(db)
rm(db)
rm(liste)
rm(l)
?save
save.image(file = "Google Drive/A synchroniser/Enseignements/DonnÃ©es/Gymnase 2000/Gymnase2000.RData")
rm(list=ls())
load("Google Drive/A synchroniser/Enseignements/DonnÃ©es/Gymnase 2000/Gymnase2000.RData")
View(Arbitrer)
View(Sports)
View(Sportifs)
rm(list=ls())
load("Google Drive/A synchroniser/Enseignements/DonnÃ©es/BD mÃ©dicaments - 2015-05-29/")
load("GGoogle Drive/A synchroniser/Enseignements/DonnÃ©es/BD mÃ©dicaments - 2015-05-29/BDmedicaments.Rdata")
load("Google Drive/A synchroniser/Enseignements/DonnÃ©es/BD mÃ©dicaments - 2015-05-29/BDmedicaments.Rdata")
summary(CIS_CIP_bdpm)
summary(CIS_CIP_bdpm$Prix)
as.numerci(summary(CIS_CIP_bdpm$Prix))
as.numeric(summary(CIS_CIP_bdpm$Prix))
head(CIS_CIP_bdpm$Prix)
replace(CIS_CIP_bdpm$Prix)
?replace
replace(CIS_CIP_bdpm$Prix, ",", ".")
??replace
stri_sub
library(stringi)
stri_sub
stri_sub(CIS_CIP_bdpm$Prix, ",", ".")
library(stringr)
str_sub(CIS_CIP_bdpm$Prix, ",", ".")
str_replace(CIS_CIP_bdpm$Prix, ",", ".")
as.numeric(str_replace(CIS_CIP_bdpm$Prix, ",", "."))
summary(as.numeric(str_replace(CIS_CIP_bdpm$Prix, ",", ".")))
CIS_CIP_bdpm$Prix
summary(as.numeric(str_replace(CIS_CIP_bdpm$TauxRemboursement, " %", ".")))
(as.numeric(str_replace(CIS_CIP_bdpm$TauxRemboursement, " %", ".")))
CIS_CIP_bdpm$TauxRemboursement
CIS_CIP_bdpm$TauxRemboursement == ""
sum(CIS_CIP_bdpm$TauxRemboursement == "")
load("BDmedicaments.Rdata")
CIS_CIP_bdpm$Taux = as.numeric(sub(" %", "", CIS_CIP_bdpm$TauxRemboursement))
CIS_CIP_bdpm$PrixOK = as.numeric(sub(",", ".", CIS_CIP_bdpm$Prix))
mean(CIS_CIP_bdpm$Taux, na.rm = T)
mean(CIS_CIP_bdpm$PrixOK, na.rm = T)
# 1. On veut les informations suivantes dans une table Ã  deux colonnes (statistique, valeur) :
#   - Nombre de mÃ©dicaments
#   - Nombre de mÃ©dicaments avec autorisation active
#   - Nombre de mÃ©dicaments avec surveillance renforcÃ©e
#   - Taux moyen de remboursement (pour ceux avec autorisation active)
#   - Prix moyen (idem que le taux)
#   - DurÃ©e moyenne de leur mise sur le marchÃ© (en nombre de jours - idem que le taux)
temp01 = merge(
subset(CIS_bdpm, subset = StatutAMM == "Autorisation active"),
CIS_CIP_bdpm,
by = "CodeCIS"
)
rep01 = data.frame(
"statistique" = c(
"Nb mÃ©dicaments",
"Avec autorisation active",
"Sous surveillance renforcÃ©e",
"Taux moyen remboursement",
"Prix moyen",
"DurÃ©e moyenne de mise sur le marchÃ©"
),
"valeur" = c(
nrow(CIS_bdpm),
nrow(subset(CIS_bdpm, subset = StatutAMM == "Autorisation active")),
nrow(subset(CIS_bdpm, subset = Surveillance == "Oui")),
mean(temp01$Taux, na.rm = T),
mean(temp01$PrixOK, na.rm = T),
mean(Sys.Date() - as.Date(temp01$DateCommercialisation, "%d/%m/%Y"))
),
stringsAsFactors = FALSE
)
rep01
voies = unique(unlist(lapply(CIS_bdpm$VoiesAdministration, strsplit, ";")))
voies
unlist(strsplit(CIS_bdpm$VoiesAdministration[9727], ";")) %in% voies
unlist(strsplit(CIS_bdpm$VoiesAdministration[9727], ";")) %in% voies[1]
v = unlist(strsplit(CIS_bdpm$VoiesAdministration[9727], ";"))
v
voies[v]
rep04 = data.frame(
Voies = unique(unlist(lapply(CIS_bdpm$VoiesAdministration, strsplit, ";"))),
NbMedicaments = NA
)
View(CIS_HAS_SMR_bdpm)
head(rep04)
rep04$Voies[v]
rep04$Voies == v
rep04$Voies %in% v
rep04$Nbedicaments + rep04$Voies %in% v
rep04 = data.frame(
Voies = unique(unlist(lapply(CIS_bdpm$VoiesAdministration, strsplit, ";"))),
NbMedicaments = 1
)
rep04$Nbedicaments + rep04$Voies %in% v
rep04$Nbedicaments
rep04 = data.frame(
Voies = unique(unlist(lapply(CIS_bdpm$VoiesAdministration, strsplit, ";"))),
NbMedicaments = 1
)
head(rep04)
rep04$NbMedicaments
rep04$NbMedicaments + rep04$Voies %in% v
lapply(CIS_bdpm$VoiesAdministration, function(v) {
unlist(strsplit(v, ";"))
})
lapply(CIS_bdpm$VoiesAdministration, function(v) {
rep04$Voies %in% unlist(strsplit(v, ";"))
})
rep04 = data.frame(
Voies = unique(unlist(lapply(CIS_bdpm$VoiesAdministration, strsplit, ";"))),
NbMedicaments = 0
)
lapply(CIS_bdpm$VoiesAdministration, function(v) {
rep04$NbMedicaments = rep04$NbMedicaments + rep04$Voies %in% unlist(strsplit(v, ";"))
})
head(rep04)
rep04
rep04 = data.frame(
Voies = unique(unlist(lapply(CIS_bdpm$VoiesAdministration, strsplit, ";"))),
NbMedicaments = 0
)
for (v in CIS_bdpm$VoiesAdministration) {
rep04$NbMedicaments = rep04$NbMedicaments + rep04$Voies %in% unlist(strsplit(v, ";"))
}
rep04
rep04 = data.frame(
Voies = unique(unlist(lapply(CIS_bdpm$VoiesAdministration, strsplit, ";"))),
NbMedicaments = 0
)
for (v in CIS_bdpm$VoiesAdministration) {
rep04$NbMedicaments = rep04$NbMedicaments + rep04$Voies %in% unlist(strsplit(v, ";"))
}
rep04
con = mongo.create(host = "127.0.0.1")
library(rmongodb)
install.packages("rmongodb")
setwd("~/Google Drive/A synchroniser/Enseignements/DonnÃ©es/Gymnase 2000")
con = mongo.create(host = "127.0.0.1")
library(rmongodb)
con = mongo.create(host = "127.0.0.1")
mongo.is.connected(con)
mongo.get.databases(con)
mongo.get.database.collections(con, "test")
rm(list=ls())
con = mongo.create(host = "127.0.0.1")
mongo.is.connected(con)
load("Gymnase2000.RData")
collection = "gym.Sportifs"
mongo.drop(con, collection)
for (i in 1:nrow(Sportifs)) {
liste = as.list(Sportifs[i,])
if (is.na(liste$IdSportifConseiller))
liste$IdSportifConseiller = NULL
j = merge(subset(Jouer, subset = IdSportif == liste$IdSportif), Sports)$Libelle
if (length(j) > 0) liste$Sports$Jouer = j
a = merge(subset(Arbitrer, subset = IdSportif == liste$IdSportif), Sports)$Libelle
if (length(a) > 0) liste$Sports$Arbitrer = a
e = merge(subset(Entrainer, subset = IdSportifEntraineur == liste$IdSportif), Sports)$Libelle
if (length(e) > 0) liste$Sports$Entrainer = e
mongo.insert(con, collection, mongo.bson.from.list(liste))
}
rm(i, j, a, e, liste)
mongo.count(con, collection)
collection = "gym.Gymnases"
mongo.drop(con, collection)
for (i in 1:nrow(Gymnases)) {
liste = as.list(Gymnases[i,])
s = subset(merge(subset(Seances, subset = IdGymnase == liste$IdGymnase), Sports), select = c(-IdGymnase, -IdSport))
t = list()
if (nrow(s) > 0) {
for (j in 1:nrow(s)) {
t[[j]] = as.list(s[j,])
}
liste$Seances = t
}
mongo.insert(con, collection, mongo.bson.from.list(liste))
}
rm(i, s, t, j, liste)
mongo.count(con, collection)
mongo.disconnect(con)

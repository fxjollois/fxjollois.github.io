}))
head(all)
mega_iris = data.frame(gg1$all, Species=rep(iris$Species, length=nrow(gg1$all)))
# pairs plot
ggplot(mega_iris, aes_string(x = "x", y = "y")) +
facet_grid(xvar ~ yvar, scales = "free") +
geom_point(aes(colour=Species), na.rm = TRUE, alpha=0.8) +
stat_density(aes(x = x, y = ..scaled.. * diff(range(x)) + min(x)),
data = gg1$densities, position = "identity",
colour = "grey20", geom = "line")
iris.mixmod = mixmodCluster(iris[-5], 1:9)
iris.mixmod
summary(iris.mixmod)
names(iris.mixmod)
attributes(iris.mixmod)
anems(attributes(iris.mixmod))
names(attributes(iris.mixmod))
iris.mixmod$bestResults
iris.mixmod$bestResult
class(iris.mixmod)
attr(iris.mixmod, "bestResult")
names(attributes(iris.mixmod))
attr(iris.mixmod, "strategy")
attr(iris.mixmod, "bestResult")
names(attributes(iris.mixmod))
attr(iris.mixmod, "criterion")
attr(iris.mixmod, "models")
attr(iris.mixmod, "error")
attr(iris.mixmod, "results")
attr(iris.mixmod, "results")[[1]]
names(attr(iris.mixmod, "results")[[1]])
attributes(attr(iris.mixmod, "results")[[1]])
summary(iris.mixmod)
?mixmodCluster
attr(iris.mixmod, "bestResult")
mixmodGaussianModel()
iris.mixmod = mixmodCluster(iris[-5], nbCluster = 1:9,
criterion = c("BIC", "ICL", "NEC"),
model = mixmodGaussianModel())
summary(iris.mixmod)
iris.mixmod
iris.mixmod = mixmodCluster(iris[-5], nbCluster = 1:9,
criterion = "ICL",
model = mixmodGaussianModel())
summary(iris.mixmod)
attr(iris.mixmod, "bestResult")
summary(iris.mixmod)
plot(iris.mixmod)
?plot.mixmod
class(iris.mixmod)
?plot.MixmodCluster
??plot.MixmodCluster
??mixmod
barplot(iris.mixmod)
barplotCluster(iris.mixmod)
barplotCluster(iris.mixmod["bestResults"])
barplotCluster(iris.mixmod["bestResult"])
barplotCluster(iris.mixmod["bestResult"], iris)
histCluster(iris.mixmod["bestResult"], iris)
histCluster(iris.mixmod["bestResult"], iris[-5])
plot(iris.mixmod, c(1,2))
plot(iris.mixmod, 1)
plot(iris.mixmod["bestResult"])
plot(iris.mixmod["bestResult"], 1)
plotCluster(iris.mixmod["bestResult"], iris[-5])
plotCluster(iris.mixmod["bestResult"], iris[-5])
plotCluster(iris.mixmod["bestResult"], iris[-5], 1, 4)
plotCluster(iris.mixmod["bestResult"], iris[-5], 1, 2)
lapply(attributes(iris.mixmod), head)
show(iris.mixmod)
plot(iris.mixmod)
par(mar = c(2, 2, 2, 0)+.1)
plot(iris.mixmod)
plot(iris.mixmod, mar = c(2, 2, 2, 0)+.1)
plotCluster(iris.mixmod["bestResult"], iris[-5], variable1 = 1, variable2 = 2)
iris.mixmodICL = mixmodCluster(iris[-5], nbCluster = 1:9,
criterion = "ICL",
model = mixmodGaussianModel())
summary(iris.mixmodICL)
summary(iris.mixmodICL["bestResult"])
?Mclust
??mclust
hc(faithful)
faithful.hc = hc(faithful)
faithful.hc
summary(faithful.hc)
ploty(faithful.hc)
plot(faithful.hc)
?hc
hcTree <- hc(modelName="VVV", data = iris[,-5])
cl <- hclass(hcTree,c(2,3))
## Not run:
par(pty = "s", mfrow = c(1,1))
clPairs(iris[,-5],cl=cl[,"2"])
clPairs(iris[,-5],cl=cl[,"3"])
faithful.hc
plot(faithful.hc)
class(faithful.hc)
attributes(faithful.hc)
head(faithful.hc)
faithful.hc
as.matrix(faithful.hc)
a = faithful.hc
class(a) = "matrix"
a
head(a)
summary(iris.mixmodICL)
?mixmodCluster
birds
data(birds)
birds
mixmodCluster(Titanic)
mixmodCluster(Titanic, 1:9)
mixmodCluster(as.data.frame(Titanic), 1:9)
as.data.frame(Titanic)
birds
kable(birds, row.names=NULL)
kable(birds, row.names=0)
kable(birds, row.names=1)
mixmodStrategy()
?mixmodStrategy
mixmodStrategy("EM", 20, "random")
birds.EM = mixmodCluster(birds, 1:9,
models = mixmodMultinomialModel(),
strategy = mixmodStrategy("EM", 20, "random"))
birds.EM
iris.EM = mixmodCluster(iris[-5], 3, strategy = mixmodStrategy("EM", 20, "random"))
iris.CEM = mixmodCluster(iris[-5], 3, strategy = mixmodStrategy("CEM", 20, "random"))
iris.EM["bestResult"]
names(attributes(iris.EM))
iris.EM["bestResult"]
names(iris.EM["bestResult"])
names(attributes(iris.EM["bestResult"]))
iris.EM["bestResult"]["partition"]
table(iris$Species, iris.EM["bestResult"]["partition"])
table(iris$Species, iris.CEM["bestResult"]["partition"])
table(iris.EM["bestResult"]["partition"], iris.EM["bestResult"]["partition"])
kable(table(iris$Species, iris.EM["bestResult"]["partition"]))
?setClass
setNames()
setNames
?setNames
tEM = table(iris$Species, iris.EM["bestResult"]["partition"])
tCEM = table(iris$Species, iris.CEM["bestResult"]["partition"])
tEMCEM = table(iris.EM["bestResult"]["partition"], iris.EM["bestResult"]["partition"])
melt(tEM)
setNames(melt(tEM), c("Species", "EM", "value")
)
setNames(melt(tEM), c("Species", "EM", "value"))
mEM = setNames(melt(tEM), c("Species", "EM", "value"))
mCEM = setNames(melt(tCEM), c("Species", "CEM", "value"))
mEMCEM = setNames(melt(tEMCEM), c("EM", "CEM", "value"))
ggplot(mEM, aes(x = Species, y = EM, fill = Value)) + geom_tile()
ggplot(mEM, aes(x = Species, y = EM, fill = value)) + geom_tile()
ggplot(mCEM, aes(x = Species, y = CEM, fill = value)) + geom_tile()
ggplot(mEMCEM, aes(x = EM, y = CEM, fill = value)) + geom_tile()
par(mfrow = c(1, 3))
ggplot(mEM, aes(x = Species, y = EM, fill = value)) + geom_tile()
ggplot(mCEM, aes(x = Species, y = CEM, fill = value)) + geom_tile()
ggplot(mEMCEM, aes(x = EM, y = CEM, fill = value)) + geom_tile()
install.packages("gridExtra")
library(gridExtra)
grid.arrange(pEM, pCEM, pEMCEM, nrow=1, ncol=3)
pEM = ggplot(mEM, aes(x = Species, y = EM, fill = value)) + geom_tile()
pCEM = ggplot(mCEM, aes(x = Species, y = CEM, fill = value)) + geom_tile()
pEMCEM = ggplot(mEMCEM, aes(x = EM, y = CEM, fill = value)) + geom_tile()
grid.arrange(pEM, pCEM, pEMCEM, nrow=1, ncol=3)
??legend
options = geom_tile() + theme(legend.position="none")
pEM = ggplot(mEM, aes(x = Species, y = EM, fill = value)) + options
pCEM = ggplot(mCEM, aes(x = Species, y = CEM, fill = value)) + options
pEMCEM = ggplot(mEMCEM, aes(x = EM, y = CEM, fill = value)) + options
grid.arrange(pEM, pCEM, pEMCEM, nrow=1, ncol=3)
mEM = setNames(melt(-tEM), c("Species", "EM", "value"))
mCEM = setNames(melt(-tCEM), c("Species", "CEM", "value"))
mEMCEM = setNames(melt(-tEMCEM), c("EM", "CEM", "value"))
options = theme(legend.position="none")
pEM = ggplot(mEM, aes(x = Species, y = EM, fill = value)) + geom_tile() + options
pCEM = ggplot(mCEM, aes(x = Species, y = CEM, fill = value)) + geom_tile() + options
pEMCEM = ggplot(mEMCEM, aes(x = EM, y = CEM, fill = value)) + geom_tile() + options
grid.arrange(pEM, pCEM, pEMCEM, nrow=1, ncol=3)
birds.mixmod = mixmodCluster(birds, 1:9,
models = mixmodMultinomialModel())
summary(birds.mixmod)
?birds
plot(birds.mixmod)
?mixmodCluster
birds.mixmod = mixmodCluster(birds, 2:5,
models = mixmodMultinomialModel())
summary(birds.mixmod)
?bids
?birds
birds.mixmod = mixmodCluster(birds, 2,
models = mixmodMultinomialModel())
summary(birds.mixmod)
plot(birds.mixmod)
barplot(birds.mixmod)
barplotCluster(birds.mixmod)
barplotCluster(birds.mixmod["bestResult"])
barplotCluster(birds.mixmod["bestResult"], birds)
barplot(birds.mixmod)
barplotCluster(birds.mixmod["bestResult"], birds)
barplotCluster(birds.mixmod["bestResult"], birds, 1)
barplot(birds.mixmod, 1)
barplot(birds.mixmod, 2)
?barplotCluster
barplot(birds.mixmod)
kable(birds, row.names=-1)
birds
?mixmodStrategy
iris.mixmod
iris.mixmod["results"]
iris.mixmod["results"][[1]]
a = iris.mixmod["results"][[1]]
names(a)
attributes(a)
attr(a, "model")
attr(a, "criterion")
attr(a, "criterionValue")
attr(a, "nbCluster")
lapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(a, "criterionValue")))
})
?lapply
sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(a, "criterionValue")))
})
sapply(iris.mixmod["results"], function (r) {
return (c(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(a, "criterionValue")))
})
sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(a, "criterionValue"), stringsAsFactors = FALSE))
})
t(sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(a, "criterionValue"), stringsAsFactors = FALSE))
}))
t(sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(r, "criterionValue"), stringsAsFactors = FALSE))
}))
iris.BIC = t(sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(r, "criterionValue"), stringsAsFactors = FALSE))
}))
melt(iris.BIC)
unmelt(iris.BIC)
?melt
cast(iris.BIC)
dcast(iris.BIC)
dcast(iris.BIC, value ~ nbCluster)
names(iris.BIC)
class(iris.BIC)
head(iris.BIC)
iris.BIC = as.data.frame(t(sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(r, "criterionValue"), stringsAsFactors = FALSE))
})))
dcast(iris.BIC, value ~ nbCluster)
acast(iris.BIC, value ~ nbCluster)
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
head(aqm)
acast(aqm, day ~ month ~ variable)
acast(aqm, month ~ variable, mean)
head(aqm)
head(airquality)
class(aqm)
acast(iris.BIC, value ~ variable)
acast(iris.BIC, value ~ nbCluster + model, sum)
acast(iris.BIC, value ~ nbCluster + model, sum, value)
variable<-c(rep("X1",5),rep("X2",4),rep("X3",3))
value<-c(rep(rnorm(1,.5,.2),5),rep(rnorm(1,.5,.2),4),rep(rnorm(1,.5,.2),3))
dat <-data.frame(variable,value)
dat <- dat[order(rnorm(nrow(dat))),]
dat
dat$id = numeric(nrow(dat))
dat
for (i in 1:nrow(dat)){
dat_temp <- dat[1:i,]
dat[i,]$id <- nrow(dat_temp[dat_temp$variable == dat[i,]$variable,])
}
dat
acast(iris.BIC, nbCluster ~ model, value = 'value')
class(data)
class(dat)
dat
iris.BIC
class(dat$variable)
class(dat$id)
class(dat$value)
factor(iris.BIC$model)
iris.BIC$model
iris.BIC = data.frame(t(sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(r, "criterionValue"), stringsAsFactors = FALSE))
})))
iris.BIC$model
iris.BIC
iris.BIC = t(sapply(iris.mixmod["results"], function (r) {
return (data.frame(nbCluster = attr(r, "nbCluster"), model = attr(r, "model"), value = attr(r, "criterionValue"), stringsAsFactors = FALSE))
}))
iris.BIC
iris.BIC$model
data.frame(iris.BIC)$model
iris.BIC[,2]
?sapply
iris.BICtemp = lapply(iris.mixmod["results"], function (r) {
return (list(nbCluster = attr(r, "nbCluster"),
model = attr(r, "model"),
value = attr(r, "criterionValue"),
stringsAsFactors = FALSE))
})
head(iris.BICtemp)
lapply(iris.BICtemp, function(r) return r$nbCluster)
lapply(iris.BICtemp, function(r) return (r$nbCluster) )
sapply(iris.BICtemp, function(r) return (r$nbCluster) )
iris.BIC = data.frame(
nbCluster = sapply(iris.BICtemp, function(r) return (r$nbCluster)),
model = sapply(iris.BICtemp, function(r) return (r$model) ),
value = sapply(iris.BICtemp, function(r) return (r$criterionValue) )
)
sapply(iris.BICtemp, function(r) return (r$nbCluster))
sapply(iris.BICtemp, function(r) return (r$model) )
iris.BICtemp = lapply(iris.mixmod["results"], function (r) {
return (list(nbCluster = attr(r, "nbCluster"),
model = attr(r, "model"),
criterionValue = attr(r, "criterionValue"),
stringsAsFactors = FALSE))
})
iris.BIC = data.frame(
nbCluster = sapply(iris.BICtemp, function(r) return (r$nbCluster)),
model = sapply(iris.BICtemp, function(r) return (r$model) ),
value = sapply(iris.BICtemp, function(r) return (r$criterionValue) )
)
iris.BIC
acast(iris.BIC, nbCluster ~ model, value = 'value')
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, colour=model)) +
geom_line()
sapply(iris.BICtemp, function(r) return (r$model) )
sub("Gaussian_", "", sapply(iris.BICtemp, function(r) return (r$model) ))
iris.BIC = data.frame(
nbCluster = sapply(iris.BICtemp, function(r) return (r$nbCluster)),
model = sub("Gaussian_", "", sapply(iris.BICtemp, function(r) return (r$model) )),
value = sapply(iris.BICtemp, function(r) return (r$criterionValue) )
)
acast(iris.BIC, nbCluster ~ model, value = 'value')
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, colour=model)) +
geom_line()
sub("Gaussian_", "", sapply(iris.BICtemp, function(r) return (r$model) ))
?aes
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, linetype=model)) +
geom_line()
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, linetype=model, color=model, shape=model)) +
geom_line()
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, linetype=model, color=model)) +
geom_line()
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, color=model)) +
geom_line()
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile()
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete()
?scale_x_discrete
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(labels = 1:9)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, labels = 1:9)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9) + xlim(1,9)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, limits= c(1,9))
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, limits= 1:9)
iris.BICtemp = lapply(iris.mixmod["results"], function (r) {
return (list(nbCluster = attr(r, "nbCluster"),
model = attr(r, "model"),
criterionValue = -attr(r, "criterionValue"),
stringsAsFactors = FALSE))
})
iris.BIC = data.frame(
nbCluster = sapply(iris.BICtemp, function(r) return (r$nbCluster)),
model = sub("Gaussian_", "", sapply(iris.BICtemp, function(r) return (r$model) )),
value = sapply(iris.BICtemp, function(r) return (r$criterionValue) )
)
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, color=model)) +
geom_line()
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, limits=1:9)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, limits=1:9) +
scale_colour_brewer(palette="BuPu", direction=-1)
iris.BICtemp = lapply(iris.mixmod["results"], function (r) {
return (list(nbCluster = attr(r, "nbCluster"),
model = attr(r, "model"),
criterionValue = attr(r, "criterionValue"),
stringsAsFactors = FALSE))
})
iris.BIC = data.frame(
nbCluster = sapply(iris.BICtemp, function(r) return (r$nbCluster)),
model = sub("Gaussian_", "", sapply(iris.BICtemp, function(r) return (r$model) )),
value = sapply(iris.BICtemp, function(r) return (r$criterionValue) )
)
ggplot(data=iris.BIC,
aes(x=nbCluster, y=value, color=model)) +
geom_line()
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, limits=1:9) +
scale_colour_brewer(palette="BuPu", direction=-1)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, limits=1:9) +
scale_colour_brewer(direction=-1)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) +
geom_tile() + scale_x_discrete(breaks=1:9, limits=1:9) +
scale_colour_brewer(direction=1)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) + scale_colour_brewer(direction=1) +
geom_tile() + scale_x_discrete(breaks=1:9, limits=1:9)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value)) + scale_colour_brewer(direction=-1) +
geom_tile() + scale_x_discrete(breaks=1:9, limits=1:9)
?scale_color_brewer
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value))  +
geom_tile() + scale_colour_brewer(direction=-1) + scale_x_discrete(breaks=1:9, limits=1:9)
p <- ggplot(diamonds, aes(x = price, fill = cut)) +
geom_histogram(position = "dodge", binwidth = 1000)
p
p + scale_fill_brewer()
p + scale_fill_brewer(direction = -1)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value))  +
geom_tile() + scale_fill_brewer(direction=-1) + scale_x_discrete(breaks=1:9, limits=1:9)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value))  +
geom_tile()  + scale_x_discrete(breaks=1:9, limits=1:9)  + scale_fill_brewer(direction=-1)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value))  +
geom_tile()  + scale_x_discrete(breaks=1:9, limits=1:9)  + scale_fill_distiller(direction=-1)
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value))  +
geom_tile()  + scale_x_discrete(breaks=1:9, limits=1:9)  + scale_fill_distiller(direction=1)
p + scale_fill_distiller()
p + scale_fill_discrete()
p + scale_fill_discrete(direction=-1)
p + scale_fill_discrete()
p = ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value))  +
geom_tile()  + scale_x_discrete(breaks=1:9, limits=1:9)
p
p + scale_fill_discrete()
p + scale_fill_distiller()
p + scale_fill_distiller(direction=-1)
p + scale_fill_distiller("clarity", direction=-1)
p + scale_fill_distiller("BuPu", direction=-1)
p + scale_fill_distiller("Blues", direction=-1)
p + scale_fill_distiller("Green", direction=-1)
p + scale_fill_distiller(palette = 1, direction=-1)
p + scale_fill_distiller(palette = 2, direction=-1)
p + scale_fill_distiller(palette = "Blues", direction=-1)
p + scale_fill_distiller(palette = "clarity", direction=-1)
p + scale_fill_distiller(palette = "Clarity", direction=-1)
pla_name()
pal_name()
ggplot(iris.BIC,
aes(x = nbCluster, y = model, fill = value))  +
geom_tile()  + scale_x_discrete(breaks=1:9, limits=1:9) +
scale_fill_distiller(direction=1)
summary(iris.mixmod)
iris.mixmod = mixmodCluster(iris[-5], nbCluster = 1:9,
model = mixmodGaussianModel())
summary(iris.mixmod)
BICmelt
ggplot(BICmelt)
ggplot(BICmelt, aes(x=NbClasses, y=Modele, fill=BIC))
p = ggplot(BICmelt, aes(x=NbClasses, y=Modele, fill=BIC))
p + geom_tile()
p + geom_tile() + scale_fill_brewer()
p + geom_tile() + scale_fill_distiller()
p + geom_tile() + scale_color_brewer()
p + geom_tile() + scale_color_brewer(direction=-1)
p + geom_tile() + scale_color_brewer(direction=1)
p + geom_tile() + scale_color_brewer(palette="Blues")
p + geom_tile() + scale_color_brewer("clarity")
p + geom_tile() + scale_color_distiller("clarity")
p + geom_tile() + scale_color_distiller()
plot(birds.mixmod)
?mixmodCluster
plot.MixmodCluster
plot.MixmodResult
??mixmod
xem2 <- mixmodCluster(birds,2)
plot(xem2)
legend("bottomleft",c("Cluster1","Cluster2"),col=c(2,3),pch=c(1,2))
quit()

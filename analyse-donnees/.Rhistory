}
afficheCOMP(1)
afficheCOMP(3)
afficheCOMP(20)
afficheCOMP(50)
afficheCOMP(320)
res = sapply(1:10, function(nbaxes) {
fxj.comp = reconstruction(nbaxes)
diff = sum((fxj - fxj.comp) ** 2)
taille = object.size(acp[[1]]$x[,1:nbaxes]) + object.size(t(acp[[1]]$rotation[,1:nbaxes]))
c(nbaxes = nbaxes, diff = diff, taille = taille)
})
res
res = sapply(1:100, function(nbaxes) {
fxj.comp = reconstruction(nbaxes)
diff = sum((fxj - fxj.comp) ** 2)
taille = object.size(acp[[1]]$x[,1:nbaxes]) + object.size(t(acp[[1]]$rotation[,1:nbaxes]))
c(nbaxes = nbaxes, diff = diff, taille = taille)
})
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(ggplot2)
ggplot(t(res), aes(nbaxes, diff)) +
geom_line()
ggplot(dta.frame(t(res)), aes(nbaxes, diff)) +
geom_line()
ggplot(data.frame(t(res)), aes(nbaxes, diff)) +
geom_line()
ggplot(data.frame(t(res)), aes(nbaxes, diff)) +
geom_line() +
theme_minimal()
summary(t(res))
ggplot(data.frame(t(res)), aes(nbaxes)) +
geom_line(aes(y = diff), colour = "Différence") +
geom_lune(aes(y = taille), colour = "Taille") +
theme_minimal()
ggplot(data.frame(t(res)), aes(nbaxes)) +
geom_line(aes(y = diff), colour = "Différence") +
geom_line(aes(y = taille), colour = "Taille") +
theme_minimal()
ggplot(data.frame(t(res)), aes(nbaxes)) +
geom_line(aes(y = diff), colour = "Difference") +
geom_line(aes(y = taille), colour = "Taille") +
theme_minimal()
ggplot(data.frame(t(res)), aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille, colour = "Taille")) +
theme_minimal()
res.df = data.frame(t(res))
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille, colour = "Taille")) +
theme_minimal()
max(res.df$taille) / max(res.df$diff)
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / 35, colour = "Taille")) +
theme_minimal()
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / 35, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * 35, name = "Taille")) +
scale_colour_manual(values = c("orange", "purple")) +
theme_minimal()
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / 35, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * 35, name = "Taille")) +
scale_colour_manual(values = c("orange", "purple")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original", colour = "") +
theme_minimal()
max(res.df$taille)
format(max(res.df$taille), "auto")
format(max(res.df$taille), "Kb")
res
res[,1]
res[3,1]
format(res[3,1], "auto")
?format
class(object.size(res))
format.object_size
format
format(function(a) { class(a) = "object_size"; return(a) }(res))
format((function(a) { class(a) = "object_size"; return(a) })(10))
format((function(a) { class(a) = "object_size"; return(a) })(10000))
format((function(a) { class(a) = "object_size"; return(a) })(max(res.df$taille)))
format((function(a) { class(a) = "object_size"; return(a) })(max(res.df$taille)), "auto")
res = sapply(c(1:50, seq(60, 320, by = 20), 640), function(nbaxes) {
fxj.comp = reconstruction(nbaxes)
diff = sum((fxj - fxj.comp) ** 2)
taille = object.size(acp[[1]]$x[,1:nbaxes]) + object.size(t(acp[[1]]$rotation[,1:nbaxes]))
c(nbaxes = nbaxes, diff = diff, taille = taille)
})
res.df = data.frame(t(res))
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / 35, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * 35, name = "Taille")) +
scale_colour_manual(values = c("orange", "purple")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original", colour = "") +
theme_minimal()
res.df = data.frame(t(res))
coeff = max(res.df$taille) / max(res.df$diff)
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / coeff, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * coeff, name = "Taille")) +
scale_colour_manual(values = c("orange", "purple")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original", colour = "") +
theme_minimal()
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / coeff, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * coeff, name = "Taille")) +
scale_colour_manual(values = c("red", "green")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original", colour = "") +
theme_minimal()
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / coeff, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * coeff, name = "Taille")) +
scale_colour_manual(values = c("red", "darkgreen")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original", colour = "") +
theme_minimal()
ggplot(res.df, aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / coeff, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * coeff, name = "Taille")) +
scale_colour_manual(values = c("red", "blue")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original", colour = "") +
theme_minimal()
ggplot(head(res.df), aes(nbaxes)) +
geom_line(aes(y = diff, colour = "Difference")) +
geom_line(aes(y = taille / coeff, colour = "Taille")) +
scale_y_continuous(sec.axis = sec_axis(~. * coeff, name = "Taille")) +
scale_colour_manual(values = c("red", "blue")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original", colour = "") +
theme_minimal()
ggplot(head(res.df), aes(nbaxes)) +
geom_line(aes(y = diff)) +
scale_colour_manual(values = c("red", "blue")) +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 20), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 30), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 20), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 50), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(tail(res.df, 5), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 50), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 50), aes(nbaxes)) +
geom_line(aes(y = log(diff)), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 100), aes(nbaxes)) +
geom_line(aes(y = log(diff)), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 80), aes(nbaxes)) +
geom_line(aes(y = log(diff)), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 60), aes(nbaxes)) +
geom_line(aes(y = log(diff)), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 50), aes(nbaxes)) +
geom_line(aes(y = log(diff)), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
ggplot(head(res.df, 50), aes(nbaxes)) +
geom_line(aes(y = diff), col = "red") +
labs(x = "Nombre d'axes", y = "Différence par rapport à l'original") +
theme_minimal()
res.df$taille[50]
res.df$taille[50] / object.size(fxj)
object.size(fxj)
object.size(fxj) / res.df$taille[50]
as.integer(object.size(fxj)) / res.df$taille[50]
round(as.integer(object.size(fxj)) / res.df$taille[50], 1)
install.packages("revealjs")
data(package = "FactoMineR")
mortality
library(FactoMineR)
mortality
data(mortality)
mortality
?tea
?JO
??PCA
data("decathlon")
decathlon
144/3
144/3/4
144/3/16
seq(10,20)
seq(10,20)/("*16")
seq(10,20)/(3*16)
5 %% 2
5 %% 1
seq(10,20)/(3*16) %% 1
seq(50,70)/(3*16) %% 1
seq(50,70)/(3*16)
seq(50,70)/(3*16) %% 1
is.integer(seq(50,70)/(3*16) )
is.integer(144/(3*16))
sapply(seq(50,70)/(3*16), function(e) { return (e == round(e))})
sapply(seq(140,150)/(3*16), function(e) { return (e == round(e))})
Filter(function(e) { return (e == round(e))}, seq(140,150)/(3*16))
?Filter
Find(function(e) { return (e == round(e))}, seq(140,150)/(3*16))
Find(function(e) { return (e == round(e))}, c(140, 144, 150)/(3*16))
Filter(function(e) { return (e == round(e))}, c(140, 144, 150)/(3*16))
Filter(function(e) { return (e == round(e))}, c(140, 144, 150, 98)/(3*16))
c(140, 144, 150, 98) / (3*16)
Filter(function(e) { print(e); return (e == round(e))}, c(140, 144, 150, 98)/(3*16))
Filter(function(e) { return (e == round(e))}, c(140, 144, 150, 98)/(3*16))
Filter(function(e) { return (e == round(e))}, c(140, 144, 150, 98)/(3*16))*(3*16)
Filter(function(e) { return (e == round(e))}, seq(3*16,200)/(3*16))*(3*16)
Filter(function(e) { return (e == round(e))}, seq(3*16,200)/(3*4))*(3*4)
96/3
96/3/4
Filter(function(e) { return (e == round(e))}, seq(3*16,200)/(3*8))*(3*8)
312/3
132/3
132/3/4
96/3/4
120/3/4
data(JO)
JO
?children
?footsize
?hobbies
?senso
?tea
?wine
?prcomp
USAccDeaths
USArrests
plot(prcomp(USArrests))
summary(prcomp(USArrests, scale = TRUE))
biplot(prcomp(USArrests, scale = TRUE))
setwd("~/Documents/fxjollois.github.io/analyse-donnees")
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 2)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 20)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 200)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 100)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 150)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 120)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 110)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 115)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 116)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 118)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 119)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, nrow = 119, quote = NULL)
nba = read.table("../donnees/nba--player-stats--regular-season-2016-2017.csv", sep = ",", header = T, quote = NULL)
summary(nba)
readLines("../../../Téléchargements/ADECal.ics", 10)
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(cours = NA, description = NA, debut = NA, fin = NA)
View(seances)
i = 0
for (l in strstplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] == "SUMMARY"){
seances[i,"cours"] = l[2]
}
}
}
}
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] == "SUMMARY"){
seances[i,"cours"] = l[2]
}
}
}
}
??switch
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = l[2]
}
}
}
}
View(seances)
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = l[2]
}
}
}
}
View(seances)
l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")
lignes = strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")
lignes
l[[24]]
lignes[[24]]
lignes[[24]][2:10]
lignes[[24]][-1]
paste(lignes[[24]][-1], collapse = ";")
paste(lignes[[24]][-1], collapse = ":")
seances[i,l[1]] = gsub("\\n", " ", paste(lignes[[24]][-1], collapse = ":"))
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = gsub("\\n", " ", paste(lignes[[24]][-1], collapse = ":"))
}
}
}
}
View(seances)
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = gsub("\\n", " ", paste(lignes[[24]][-1], collapse = ":"))
}
}
}
}
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = gsub("\\n", " ", paste(l[-1], collapse = ":"))
}
}
}
}
seances[1,2]
gsub("\\n", "", seances[1,2])
sub("\\n", "", seances[1,2])
sub("\\\\n", "", seances[1,2])
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = gsub("\\\\n", " ", sub("\\\\n", " ", paste(l[-1], collapse = ":")))
}
}
}
}
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = gsub("\\\\n", paste(l[-1], collapse = ":"))
}
}
}
}
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics", 100), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = gsub("\\\\n", " ", paste(l[-1], collapse = ":"))
}
}
}
}
seances$DTSTART
as.POSIXct(seances$DTSTART)
as.POSIXlt(seances$DTSTART)
?as.POSIXct
as.POSIXlt(seances$DTSTART, format = "%Y%m%dT%h%M%SZ")
as.POSIXct(seances$DTSTART, format = "%Y%m%dT%h%M%SZ")
as.POSIXct(seances$DTSTART, format = "%Y%m%d %h%M%SZ")
seances$DTSTART
as.POSIXct(seances$DTSTART, format = "%Y%m%dT%h%M%SZ")
as.POSIXct(z, origin = "1960-01-01")                # local
as.POSIXct(z, origin = "1960-01-01", tz = "GMT")    # in UTC
z <- 1472562988
as.POSIXct(z, origin = "1960-01-01")                # local
as.POSIXct(z, origin = "1960-01-01", tz = "GMT")    # in UTC
strptime(seances$DTSTART, format = "%Y%m%dT%h%M%SZ")
class(seances$DTSTART)
?strptime
strptime(substr(seances$DTSTART, 1, 4), "%Y")
strptime(substr(seances$DTSTART, 1, 6), "%Y%m")
seances$DTSTART
substr(seances$DTSTART, 1, 6)
strptime(substr(seances$DTSTART, 1, 6), "%Y%m")
strptime(substr(seances$DTSTART, 1, 6), "%Y%d")
strptime(substr(seances$DTSTART, 1, 8), "%Y%d%m")
strptime(substr(seances$DTSTART, 1, 8), "%Y%m%d")
substr(seances$DTSTART, 1, 8)
strptime(substr(seances$DTSTART, 1, 9), "%Y%m%dT")
strptime(substr(seances$DTSTART, 1, 11), "%Y%m%dT%H")
strptime(substr(seances$DTSTART, 1, 13), "%Y%m%dT%H%M")
strptime(substr(seances$DTSTART, 1, 15), "%Y%m%dT%H%M%S")
strptime(seances$DTSTART, "%Y%m%dT%H%M%S")
strptime(seances$DTSTART, "%Y%m%dT%h%M%SZ")
strptime(seances$DTSTART, "%Y%m%dT%H%M%S")
strptime(seances$DTSTART, "%Y%m%dT%h%M%S")
strptime(seances$DTSTART, "%Y%m%dT%H%M%S")
strptime(seances$DTSTART, "%Y%m%dT%H%M%SZ")
strptime(seances$DTEND, "%Y%m%dT%H%M%SZ")
seances = transform(seances,
debut = strptime(DTSTART, "%Y%m%dT%H%M%SZ"),
fin = strptime(DTEND, "%Y%m%dT%H%M%SZ"),
duree = fin - debut)
seances = transform(seances,
debut = strptime(DTSTART, "%Y%m%dT%H%M%SZ"),
fin = strptime(DTEND, "%Y%m%dT%H%M%SZ"))
View(seances)
seances$fin = seances$fin - seances$debut
seances = transform(seances,
debut = strptime(DTSTART, "%Y%m%dT%H%M%SZ"),
fin = strptime(DTEND, "%Y%m%dT%H%M%SZ"))
seances$duree = seances$fin - seances$debut
View(seances)
sum(seances$duree)
aggreagte(duree ~ SUMMARY, seances, sum)
aggregate(duree ~ SUMMARY, seances, sum)
readLines("../../../Téléchargements/ADECal.ics", 100)
seances = data.frame(SUMMARY = NA, DESCRIPTION = NA, DTSTART = NA, DTEND = NA)
i = 0
for (l in strsplit(readLines("../../../Téléchargements/ADECal.ics"), ":")) {
if (l[1] == "BEGIN" && l[2] == "VEVENT") {
i = i + 1
} else {
if (i > 0) {
if (l[1] %in% names(seances)) {
seances[i,l[1]] = gsub("\\\\n", " ", paste(l[-1], collapse = ":"))
}
}
}
}
seances$DTSTART
seances = transform(seances,
debut = strptime(DTSTART, "%Y%m%dT%H%M%SZ"),
fin = strptime(DTEND, "%Y%m%dT%H%M%SZ"))
seances$duree = seances$fin - seances$debut
sum(seances$duree)
aggregate(duree ~ SUMMARY, seances, sum)
aggregate(duree ~ 1, seances, sum)
